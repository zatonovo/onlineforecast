Dnew_transformed$AR.Order1
modelAR$yAR
rls_update(modelAR, Dnew_transformed, Dnew[[model$output]])
yhatAR <- rls_predict(modelAR, Dnew_transformed)
modelAR$yAR
(i <- iseq[length(iseq)] + 2)
Dnew <- subset(D, i)
Dnew_transformed <- model$transform_data(Dnew)
rls_update(model, Dnew_transformed, Dnew[[model$output]])
yhat <- rls_predict(model, Dnew_transformed)
iseq <- i+modelAR$kseq
plot(D$t[iseq], D$y[iseq], type = "b", xlab = "t", ylab = "y")
lines(D$t[iseq], yhat[1,], type = "b", col = 2)
lines(D$t[iseq], yhatAR[1,], type = "b", col = 4)
legend("topright", c("observations",pst("predictions (",min(modelAR$kseq)," to ",max(modelAR$kseq)," steps ahead)"),
pst("Predictions AR (",min(model$kseq)," to ",max(model$kseq)," steps ahead)")), lty = 1, col = c(1,2,4))
Ex1data <- data.frame(x = c(71,74,82,76,91,82,82,75,79,82,72,90))
10:90
ObsVar <- var(Ex1data$x)
ObsVar
1/sqrt(2*pi*ObsVar) * exp(-(71 - 70)^2/(2*ObsVar))
1/sqrt(2*pi*ObsVar) * exp(-(72 - 70)^2/(2*ObsVar))
1/sqrt(2*pi*ObsVar) * exp(-(c(71,72) - 70)^2/(2*ObsVar))
1/sqrt(2*pi*ObsVar) * exp(-(Ex1data$x - 70)^2/(2*ObsVar))
prod(1/sqrt(2*pi*ObsVar) * exp(-(Ex1data$x - 70)^2/(2*ObsVar)))
LikelihoodAll
ObsVar <- var(Ex1data$x)
LikelihoodAll <- sapply(70:91, function(mean) prod(1/sqrt(2*pi*ObsVar) * exp(-(Ex1data$x - mean)^2/(2*ObsVar))))
LikelihoodAll
plot(LikelihoodAll)
plot(70:91LikelihoodAll)
plot(70:91, LikelihoodAll)
ObsVar <- 1#var(Ex1data$x)
test <- c(4.6,6.3,5.0)
LikelihoodAll <- sapply(4:6.5, function(mean) prod(1/sqrt(2*pi*ObsVar) * exp(-(test - mean)^2/(2*ObsVar))))
plot(4:6.5, LikelihoodAll)
LikelihoodAll <- sapply(seq(4,6.5,0.1), function(mean) prod(1/sqrt(2*pi*ObsVar) * exp(-(test - mean)^2/(2*ObsVar))))
plot(seq(4,6.5,0.1), LikelihoodAll)
LikelihoodAll <- sapply(seq(70,95,0.1), function(mean) prod(1/sqrt(2*pi*ObsVar) * exp(-(Ex1data$x - mean)^2/(2*ObsVar))))
Seq <- seq(70,95,0.1
LikelihoodAll <- sapply(), function(mean) prod(1/sqrt(2*pi*ObsVar) * exp(-(Ex1data$x - mean)^2/(2*ObsVar))))
Seq <- seq(70,95,0.1)
LikelihoodAll <- sapply(Seq, function(mean) prod(1/sqrt(2*pi*ObsVar) * exp(-(Ex1data$x - mean)^2/(2*ObsVar))))
plot(Seq, LikelihoodAll)
Seq <- seq(75,85,0.1)
LikelihoodAll <- sapply(Seq, function(mean) prod(1/sqrt(2*pi*ObsVar) * exp(-(Ex1data$x - mean)^2/(2*ObsVar))))
plot(Seq, LikelihoodAll)
L.complete.data <- function(theta) prod(dnorm(Ex1data$x, mean = theta, sd = sqrt(s2)))
plot(Seq, LikelihoodAll)
L.complete.data <- function(theta) prod(dnorm(Ex1data$x, mean = theta, sd = sqrt(ObsVar)))
th <- seq(mean(Ex1data$x) - 3*sqrt(ObsVar), mean(Ex1data$x) + 3* sqrt(ObsVar), length = 200)
L <- sapply(th, L.complete.data)
plot(th, L)
plot(Seq, LikelihoodAll)
plot(th, L)
plot(Seq, LikelihoodAll)
plot(th, L)
plot(th, L/max(L), ylab = "L", xlab = expression(theta))
L.ave <- function(theta) dnorm(mean(Ex1data$x), mean = theta, sd = sqrt(ObsVar/length(Ex1data$x)))
LAverage <- sapply(th, L.ave)
lines(th, LAverage/max(LAverage), col = "red")
mean(Ex1data$x)
abline(v = mean(Ex1data$x), col = "blue")
mle.estimate <- function(th) -sum(dnorm(Ex1data$x, mean = theta, sd = sqrt(ObsVar), log = TRUE))
fit <- optiom(par = mean(Ex1data$x),
fn = mle.estimate,
hessian = TRUE)
fit <- optim(par = mean(Ex1data$x),
fn = mle.estimate,
hessian = TRUE)
?optim
mle.estimate <- function(th) -sum(dnorm(Ex1data$x, mean = th, sd = sqrt(ObsVar), log = TRUE))
fit <- optim(par = mean(Ex1data$x),
fn = mle.estimate,
hessian = TRUE)
mle.estimate <- function(th) -sum(dnorm(Ex1data$x, mean = th, sd = sqrt(ObsVar), log = TRUE))
fit <- optim(par = mean(Ex1data$x),
fn = mle.estimate,
hessian = TRUE,
method = "Brent")
fit <- optim(par = mean(Ex1data$x),
fn = mle.estimate,
hessian = TRUE,
method = "Brent",
lower = min(Ex1data$x),
upper = max(Ex1data$x))
print(fit)
fit <- optim(par = mean(Ex1data$x),
fn = mle.estimate,
hessian = TRUE,
method = "Brent",
lower = min(Ex1data$x),
upper = max(Ex1data$x))
print(fit)
fit <- optim(par = mean(Ex1data$x),
fn = mle.estimate,
hessian = TRUE,
method = "Brent",
lower = min(Ex1data$x),
upper = max(Ex1data$x))
print(fit)
fit$hessian
1/fit$hessian
ObsVar
1
ObsVar <- var(Ex1data$x)
mle.estimate <- function(th) -sum(dnorm(Ex1data$x, mean = th, sd = sqrt(ObsVar), log = TRUE))
fit <- optim(par = mean(Ex1data$x),
fn = mle.estimate,
hessian = TRUE,
method = "Brent",
lower = min(Ex1data$x),
upper = max(Ex1data$x))
print(fit)
1/fit$hessian
ObsVar
print(solve(fit$hessian))
print(ObsVar)
print(solve(fit$hessian))
print(sqrt(ObsVar))
print(solve(fit$hessian))
print(ObsVar/length(Ex1data$x))
print(solve(fit$hessian))
Ex3data <- data.frame(x = c(4,6,3,7,2,4))
?dpois
lambdaseq = seq(-4,0,0.1)
Posres <- optim(par = lambdaseq,
fn = PosLogLikelihood)
PosLogLikelihood <- function(lambda) -sum(dpois(x = Ex3data$x, lambda = lambda, log = TRUE))
lambdaseq = seq(-4,0,0.1)
Posres <- optim(par = lambdaseq,
fn = PosLogLikelihood)
lambdaseq = seq(-4,0,0.1)
lambdaseq
Posres <- optim(par = lambdaseq,
fn = PosLogLikelihood,
)
Posres
plot(lambdaseq, PosLogLikelihood(lambdaseq))
dpois(x = Ex3data$x, lambda = 0, log = TRUE)
Ex3data
PosLogLikelihood <- function(lambda) sum(dpois(x = Ex3data$x, lambda = lambda, log = TRUE))
lambdaseq = seq(-4,0,0.1)
plot(lambdaseq, PosLogLikelihood(lambdaseq))
lambdaseq = seq(1,8,0.1)
plot(lambdaseq, PosLogLikelihood(lambdaseq))
PosLogLikelihood <- function(lambda) sum(dpois(x = Ex3data$x, lambda = lambda, log = TRUE))
lambdaseq = seq(1,8,0.1)
plot(lambdaseq, PosLogLikelihood(lambdaseq))
lambdaseq
PosLogLikelihood(lambdaseq)
plot(lambdaseq, sapply(lambdaseq, PosLogLikelihood))
L <- sapply(lambdaseq, PosLogLikelihood)
plot(lambdaseq, L - max(L))
lambdaseq = seq(2,7,0.1)
L <- sapply(lambdaseq, PosLogLikelihood)
plot(lambdaseq, L - max(L))
lambdaseq = seq(2.5,7,0.1)
L <- sapply(lambdaseq, PosLogLikelihood)
plot(lambdaseq, L - max(L))
lambdaseq = seq(2.3,7,0.1)
L <- sapply(lambdaseq, PosLogLikelihood)
plot(lambdaseq, L - max(L))
lambdaseq = seq(2.3,7.4,0.1)
L <- sapply(lambdaseq, PosLogLikelihood)
plot(lambdaseq, L - max(L))
lambdaseq = seq(2.3,7.3,0.1)
L <- sapply(lambdaseq, PosLogLikelihood)
plot(lambdaseq, L - max(L))
L.quad <- sapply(lambdaseq, l.quad)
l.quad <- function(lambda) dpois(x = mean(Ex3data$x), lambda = lambda, log = TRUE) - 0.5*length(Ex3data$x)/mean(Ex3data$x) * (lambda - mean(Ex3data$x))^2
L.quad <- sapply(lambdaseq, l.quad)
warnings()
L.quad
l.quad <- function(lambda) dpois(x = Ex3data$x, lambda =  mean(Ex3data$x), log = TRUE) - 0.5*length(Ex3data$x)/mean(Ex3data$x) * (lambda - mean(Ex3data$x))^2
L.quad <- sapply(lambdaseq, l.quad)
lines(lambdaseq, l.quad, col = "red")
lines(lambdaseq, L.quad, col = "red")
L.quad
l.quad <- function(lambda) sum(dpois(x = Ex3data$x, lambda =  mean(Ex3data$x), log = TRUE)) - 0.5*length(Ex3data$x)/mean(Ex3data$x) * (lambda - mean(Ex3data$x))^2
L.quad <- sapply(lambdaseq, l.quad)
lines(lambdaseq, L.quad, col = "red")
L.quad
lines(lambdaseq, L.quad - max(L.quad), col = "red")
PosLogLikelihood <- function(lambda) sum(dpois(x = Ex3data$x, lambda = lambda, log = TRUE))
lambdaseq = seq(2,7.3,0.1)
L <- sapply(lambdaseq, PosLogLikelihood)
plot(lambdaseq, L - max(L))
l.quad <- function(lambda) sum(dpois(x = Ex3data$x, lambda =  mean(Ex3data$x), log = TRUE)) - 0.5*length(Ex3data$x)/mean(Ex3data$x) * (lambda - mean(Ex3data$x))^2
L.quad <- sapply(lambdaseq, l.quad)
lines(lambdaseq, L.quad - max(L.quad), col = "red")
PosLogLikelihood <- function(lambda) sum(dpois(x = Ex3data$x, lambda = lambda, log = TRUE))
lambdaseq = seq(2.3,7.3,0.1)
L <- sapply(lambdaseq, PosLogLikelihood)
plot(lambdaseq, L - max(L))
l.quad <- function(lambda) sum(dpois(x = Ex3data$x, lambda =  mean(Ex3data$x), log = TRUE)) - 0.5*length(Ex3data$x)/mean(Ex3data$x) * (lambda - mean(Ex3data$x))^2
L.quad <- sapply(lambdaseq, l.quad)
lines(lambdaseq, L.quad - max(L.quad), col = "red")
plot(lambdaseq, exp(L - max(L)))
lines(lambdaseq, exp(L.quad - max(L.quad)), col = "red")
par(mfrow = c(1,2))
plot(lambdaseq, L - max(L))
lines(lambdaseq, L.quad - max(L.quad), col = "red")
plot(lambdaseq, exp(L - max(L)))
lines(lambdaseq, exp(L.quad - max(L.quad)), col = "red")
## Demo on how the AR part works in onlineforecast
rm(list = ls())
library(devtools)
load_all(as.package("../../onlineforecast"))
class(Dbuildingheatload)
D <- Dbuildingheatload
D$y <- D$Heatload$house9
plot_ts(D, c("^y","Ta"), kseq=c(0,12))
plot_ts(D, c("^y","Ta"), "2010-12-15", "2010-12-25", kseq=c(0,12))
Dtrain <- subset(D, c("2010-12-15", "2011-01-01"))
Dtrain$fiteval <- period("2010-12-20", Dtrain$t)
model <- forecastmodel$new()
model$output = "y"
model$add_inputs(Ta = "lp(Ta, a1=0.9)",
I = "lp(I, a1=0.7)",
mu_tday = "fs(tday/24, nharmonics=10)",
mu = "ones()")
model$add_regp("rls_prm(lambda=0.9)")
model$add_pb(Ta__a1 = c(0.8, 0.9, 0.9999),
I__a1 =  c(0.4, 0.8, 0.9999),
lambda = c(0.9, 0.99, 0.9999))
model$kseq <- c(1,18)
model$p <- rls_optim(model, Dtrain, control=list(maxit=2), cachedir = "cache-building-heat-load-forecasting")$par
model$kseq <- 1:36
val <- rls_fit(model$p, model, D, returnanalysis = TRUE)
D$Yhat <- val$Yhat
i <- 200
iseq <- i+model$kseq
plot(D$t[iseq], D$y[iseq], type = "b", xlab = "t", ylab = "y")
lines(D$t[iseq], D$Yhat[i, ], type = "b", col = 2)
legend("topright", c("Observations",pst("Predictions (",min(model$kseq)," to ",max(model$kseq)," steps ahead)")), lty = 1, col = 1:2)
iseq <- which(period("2010-12-15",D$t,"2011-01-01"))
Dfit <- subset(D, iseq)
rls_fit(model$p, model, Dfit)
(i <- iseq[length(iseq)] + 1)
Dnew <- subset(D, i)
Dnew_transformed <- model$transform_data(Dnew)
rls_update(model, Dnew_transformed, Dnew[[model$output]])
yhat <- rls_predict(model, Dnew_transformed)
## AR part
#source("AR.R")
modelAR <- forecastmodel$new()
modelAR$output = "y"
modelAR$add_inputs(Ta = "lp(Ta, a1=0.9)",
I = "lp(I, a1=0.7)",
mu_tday = "fs(tday/24, nharmonics=10)",
mu = "ones()",
AR = "AR(lags=c(0))")
modelAR$add_regp("rls_prm(lambda=0.9)")
modelAR$add_pb(Ta__a1 = c(0.8, 0.9, 0.9999),
I__a1 =  c(0.4, 0.8, 0.9999),
lambda = c(0.9, 0.99, 0.9999))
modelAR$kseq <- c(1,18)
modelAR$p <- rls_optim(modelAR, Dtrain, control=list(maxit=2), cachedir = "cache-building-heat-load-forecasting")$par
modelAR$kseq <- 1:36
valAR <- rls_fit(modelAR$p, modelAR, D, returnanalysis = TRUE)
D$YhatAR <- valAR$Yhat
plot_ts(D, c("^y|^Y"), "2011-01-01", "2011-02-01", kseq = c(1,18))
plot_ts(D, c("^y|^Y"), "2011-01-01", "2011-01-10", kseq = c(1,18))
i <- 200
iseq <- i+modelAR$kseq
plot(D$t[iseq], D$y[iseq], type = "b", xlab = "t", ylab = "y")
lines(D$t[iseq], D$Yhat[i, ], type = "b", col = 2)
lines(D$t[iseq], D$YhatAR[i, ], type = "b", col = 4)
legend("topright", c("Observations",pst("Predictions (",min(model$kseq)," to ",max(model$kseq)," steps ahead)"),
pst("Predictions AR (",min(model$kseq)," to ",max(model$kseq)," steps ahead)")), lty = 1, col = c(1,2,4))
sqrt(mean( as.numeric((D$y[iseq] -  D$Yhat[i, ])^2), na.rm = T))
sqrt(mean( as.numeric((D$y[iseq] -  D$YhatAR[i, ])^2), na.rm = T))
## Update
## THINKABOUT WITH bigger lag and more new observation!!!
model <- forecastmodel$new()
model$output = "y"
modelAR$add_inputs(Ta = "lp(Ta, a1=0.9)",
I = "lp(I, a1=0.7)",
mu_tday = "fs(tday/24, nharmonics=10)",
mu = "ones()",
AR = "AR(lags=c(0,1,4))")
modelAR$add_regp("rls_prm(lambda=0.9)")
modelAR$add_pb(Ta__a1 = c(0.8, 0.9, 0.9999),
I__a1 =  c(0.4, 0.8, 0.9999),
lambda = c(0.9, 0.99, 0.9999))
modelAR$kseq <- c(1,18)
iseq <- which(period("2010-12-15",D$t,"2011-01-01"))
Dfit <- subset(D, iseq)
rls_fit(modelAR$p, modelAR, Dfit)
str(modelAR$Lfits[1:2])
(i <- iseq[length(iseq)] + 1)
Dnew <- subset(D, i:(i))
Dnew$y
modelAR$yAR
D$y[(i-6):i]
Dnew_transformed <- modelAR$transform_data(Dnew)
Dnew_transformed$AR.lag0
Dnew_transformed$AR.lag1
Dnew_transformed$AR.lag4
## modelAR$yAR
## rls_update(modelAR, Dnew_transformed, Dnew[[model$output]])
## yhatAR <- rls_predict(modelAR, Dnew_transformed)
## modelAR$yAR
## iseq <- i+modelAR$kseq
## plot(D$t[iseq], D$y[iseq], type = "b", xlab = "t", ylab = "y")
## lines(D$t[iseq], yhat[1,], type = "b", col = 2)
## lines(D$t[iseq], yhatAR[1,], type = "b", col = 4)
## legend("topright", c("observations",pst("predictions (",min(modelAR$kseq)," to ",max(modelAR$kseq)," steps ahead)"),
##                      pst("Predictions AR (",min(model$kseq)," to ",max(model$kseq)," steps ahead)")), lty = 1, col = c(1,2,4))
## (i <- iseq[length(iseq)] + 2)
## Dnew <- subset(D, i:(i))
## Dnew$y
## modelAR$yAR
## tail(Dfit$y)
## Dnew_transformed <- modelAR$transform_data(Dnew)
## Dnew_transformed$AR.lag3
## Dnew_transformed$AR.Order2
## Dnew_transformed$AR.Order1
## modelAR$yAR
## rls_update(modelAR, Dnew_transformed, Dnew[[model$output]])
## yhatAR <- rls_predict(modelAR, Dnew_transformed)
## modelAR$yAR
## (i <- iseq[length(iseq)] + 2)
## Dnew <- subset(D, i)
## Dnew_transformed <- model$transform_data(Dnew)
## rls_update(model, Dnew_transformed, Dnew[[model$output]])
## yhat <- rls_predict(model, Dnew_transformed)
## iseq <- i+modelAR$kseq
## plot(D$t[iseq], D$y[iseq], type = "b", xlab = "t", ylab = "y")
## lines(D$t[iseq], yhat[1,], type = "b", col = 2)
## lines(D$t[iseq], yhatAR[1,], type = "b", col = 4)
## legend("topright", c("observations",pst("predictions (",min(modelAR$kseq)," to ",max(modelAR$kseq)," steps ahead)"),
##                      pst("Predictions AR (",min(model$kseq)," to ",max(model$kseq)," steps ahead)")), lty = 1, col = c(1,2,4))
## Demo on how the AR part works in onlineforecast
rm(list = ls())
library(devtools)
load_all(as.package("../../onlineforecast"))
load_all(as.package("../onlineforecast"))
library(onlineforecast)
load_all(as.package("../../onlineforecast"))
library(devtools)
load_all(as.package("../../onlineforecast"))
load_all(as.package("../onlineforecast"))
setwd("~/Documents/phd/Projects/Git/onlineforecast/misc-R")
load_all(as.package("../onlineforecast"))
load_all(as.package("../../onlineforecast"))
## Demo on how the AR part works in onlineforecast
rm(list = ls())
library(devtools)
load_all(as.package("../../onlineforecast"))
class(Dbuildingheatload)
D <- Dbuildingheatload
D$y <- D$Heatload$house9
plot_ts(D, c("^y","Ta"), kseq=c(0,12))
plot_ts(D, c("^y","Ta"), "2010-12-15", "2010-12-25", kseq=c(0,12))
Dtrain <- subset(D, c("2010-12-15", "2011-01-01"))
Dtrain$fiteval <- period("2010-12-20", Dtrain$t)
model <- forecastmodel$new()
model$output = "y"
model$add_inputs(Ta = "lp(Ta, a1=0.9)",
I = "lp(I, a1=0.7)",
mu_tday = "fs(tday/24, nharmonics=10)",
mu = "ones()")
model$add_regp("rls_prm(lambda=0.9)")
model$add_pb(Ta__a1 = c(0.8, 0.9, 0.9999),
I__a1 =  c(0.4, 0.8, 0.9999),
lambda = c(0.9, 0.99, 0.9999))
model$kseq <- c(1,18)
model$p <- rls_optim(model, Dtrain, control=list(maxit=2), cachedir = "cache-building-heat-load-forecasting")$par
model$kseq <- 1:36
val <- rls_fit(model$p, model, D, returnanalysis = TRUE)
D$Yhat <- val$Yhat
i <- 200
iseq <- i+model$kseq
plot(D$t[iseq], D$y[iseq], type = "b", xlab = "t", ylab = "y")
lines(D$t[iseq], D$Yhat[i, ], type = "b", col = 2)
legend("topright", c("Observations",pst("Predictions (",min(model$kseq)," to ",max(model$kseq)," steps ahead)")), lty = 1, col = 1:2)
iseq <- which(period("2010-12-15",D$t,"2011-01-01"))
Dfit <- subset(D, iseq)
rls_fit(model$p, model, Dfit)
(i <- iseq[length(iseq)] + 1)
Dnew <- subset(D, i)
Dnew_transformed <- model$transform_data(Dnew)
rls_update(model, Dnew_transformed, Dnew[[model$output]])
yhat <- rls_predict(model, Dnew_transformed)
## AR part
#source("AR.R")
modelAR <- forecastmodel$new()
modelAR$output = "y"
modelAR$add_inputs(Ta = "lp(Ta, a1=0.9)",
I = "lp(I, a1=0.7)",
mu_tday = "fs(tday/24, nharmonics=10)",
mu = "ones()",
AR = "AR(lags=c(0))")
modelAR$add_regp("rls_prm(lambda=0.9)")
modelAR$add_pb(Ta__a1 = c(0.8, 0.9, 0.9999),
I__a1 =  c(0.4, 0.8, 0.9999),
lambda = c(0.9, 0.99, 0.9999))
modelAR$kseq <- c(1,18)
modelAR$p <- rls_optim(modelAR, Dtrain, control=list(maxit=2), cachedir = "cache-building-heat-load-forecasting")$par
modelAR$kseq <- 1:36
valAR <- rls_fit(modelAR$p, modelAR, D, returnanalysis = TRUE)
D$YhatAR <- valAR$Yhat
plot_ts(D, c("^y|^Y"), "2011-01-01", "2011-02-01", kseq = c(1,18))
plot_ts(D, c("^y|^Y"), "2011-01-01", "2011-01-10", kseq = c(1,18))
i <- 200
iseq <- i+modelAR$kseq
plot(D$t[iseq], D$y[iseq], type = "b", xlab = "t", ylab = "y")
lines(D$t[iseq], D$Yhat[i, ], type = "b", col = 2)
lines(D$t[iseq], D$YhatAR[i, ], type = "b", col = 4)
legend("topright", c("Observations",pst("Predictions (",min(model$kseq)," to ",max(model$kseq)," steps ahead)"),
pst("Predictions AR (",min(model$kseq)," to ",max(model$kseq)," steps ahead)")), lty = 1, col = c(1,2,4))
sqrt(mean( as.numeric((D$y[iseq] -  D$Yhat[i, ])^2), na.rm = T))
sqrt(mean( as.numeric((D$y[iseq] -  D$YhatAR[i, ])^2), na.rm = T))
## Update
## THINKABOUT WITH bigger lag and more new observation!!!
model <- forecastmodel$new()
model$output = "y"
modelAR$add_inputs(Ta = "lp(Ta, a1=0.9)",
I = "lp(I, a1=0.7)",
mu_tday = "fs(tday/24, nharmonics=10)",
mu = "ones()",
AR = "AR(lags=c(0,1,4))")
modelAR$add_regp("rls_prm(lambda=0.9)")
modelAR$add_pb(Ta__a1 = c(0.8, 0.9, 0.9999),
I__a1 =  c(0.4, 0.8, 0.9999),
lambda = c(0.9, 0.99, 0.9999))
modelAR$kseq <- c(1,18)
iseq <- which(period("2010-12-15",D$t,"2011-01-01"))
Dfit <- subset(D, iseq)
rls_fit(modelAR$p, modelAR, Dfit)
str(modelAR$Lfits[1:2])
(i <- iseq[length(iseq)] + 1)
Dnew <- subset(D, i:(i))
Dnew$y
modelAR$yAR
D$y[(i-6):i]
Dnew_transformed <- modelAR$transform_data(Dnew)
Dnew_transformed$AR.lag0
Dnew_transformed$AR.lag1
Dnew_transformed$AR.lag4
## modelAR$yAR
## rls_update(modelAR, Dnew_transformed, Dnew[[model$output]])
## yhatAR <- rls_predict(modelAR, Dnew_transformed)
## modelAR$yAR
## iseq <- i+modelAR$kseq
## plot(D$t[iseq], D$y[iseq], type = "b", xlab = "t", ylab = "y")
## lines(D$t[iseq], yhat[1,], type = "b", col = 2)
## lines(D$t[iseq], yhatAR[1,], type = "b", col = 4)
## legend("topright", c("observations",pst("predictions (",min(modelAR$kseq)," to ",max(modelAR$kseq)," steps ahead)"),
##                      pst("Predictions AR (",min(model$kseq)," to ",max(model$kseq)," steps ahead)")), lty = 1, col = c(1,2,4))
## (i <- iseq[length(iseq)] + 2)
## Dnew <- subset(D, i:(i))
## Dnew$y
## modelAR$yAR
## tail(Dfit$y)
## Dnew_transformed <- modelAR$transform_data(Dnew)
## Dnew_transformed$AR.lag3
## Dnew_transformed$AR.Order2
## Dnew_transformed$AR.Order1
## modelAR$yAR
## rls_update(modelAR, Dnew_transformed, Dnew[[model$output]])
## yhatAR <- rls_predict(modelAR, Dnew_transformed)
## modelAR$yAR
## (i <- iseq[length(iseq)] + 2)
## Dnew <- subset(D, i)
## Dnew_transformed <- model$transform_data(Dnew)
## rls_update(model, Dnew_transformed, Dnew[[model$output]])
## yhat <- rls_predict(model, Dnew_transformed)
## iseq <- i+modelAR$kseq
## plot(D$t[iseq], D$y[iseq], type = "b", xlab = "t", ylab = "y")
## lines(D$t[iseq], yhat[1,], type = "b", col = 2)
## lines(D$t[iseq], yhatAR[1,], type = "b", col = 4)
## legend("topright", c("observations",pst("predictions (",min(modelAR$kseq)," to ",max(modelAR$kseq)," steps ahead)"),
##                      pst("Predictions AR (",min(model$kseq)," to ",max(model$kseq)," steps ahead)")), lty = 1, col = c(1,2,4))
valAR$Yhat
head(D)
head(D$t)
dim(valAR$Yhat)
dummyDF <- data.frame(PredTime = D$t[1],
Time = D$t[2:dim(valAR$Yhat)[2]])
dummyDF
dummyDF <- data.frame(PredTime = D$t[1],
Time = D$t[2:dim(valAR$Yhat)[2]],
k = 1:(dim(valAR$Yhat)[2]))
dummyDF
predictionDataFrame <- function()
{
head(D$t)
dummyDF <- data.frame(PredTime = D$t[1],
Time = D$t[2:dim(valAR$Yhat)[2]],
k = 1:(dim(valAR$Yhat)[2]))
dummyDF
}
dummyDF <- data.frame(PredTime = D$t[1],
Time = D$t[2:dim(valAR$Yhat)[2]],
k = 1:(dim(valAR$Yhat)[2]))
dummyDF <- data.frame(PredTime = D$t[1],
Time = D$t[2:(dim(valAR$Yhat)[2]+1)],
k = 1:(dim(valAR$Yhat)[2]))
dummyDF
dummyDF <- data.frame(PredTime = D$t[1],
Time = D$t[2:(dim(valAR$Yhat)[2]+1)],
k = 1:(dim(valAR$Yhat)[2]),
Pred = valAR$Yhat[1,])
valAR$Yhat[1,]
dummyDF <- data.frame(PredTime = D$t[1],
Time = D$t[2:(dim(valAR$Yhat)[2]+1)],
k = 1:(dim(valAR$Yhat)[2]),
Pred = as.numeric(valAR$Yhat[1,]))
dummyDF
